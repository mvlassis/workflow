#!/usr/bin/env ruby

require 'fileutils'
require 'json'
require 'optparse'

# Rename all items in this sudirectory recursively, by replacing old_str with new_str
def rename_items(directory, old_str, new_str)
  # Get all files/directories, and sort then by their depth to handle deep items first
  items = Dir.glob("#{directory}/**/*", File::FNM_DOTMATCH).sort_by { |path| -path.count('/') }

  items.each do |item|
    next if item.end_with?('.', '..')
    base_name = File.basename(item)
    # Only rename directories and specific model files
    next unless base_name.include?(old_str) && (File.directory?(item) || base_name.end_with?('.bntx', '.nus3audio'))

    new_name = base_name.gsub(old_str, new_str)

    new_path = File.join(File.dirname(item), new_name)

    FileUtils.mv(item, new_path)
    puts "Renamed: #{item} -> #{new_path}"
  end
end


def update_json_content(directory, old_str, new_str)
  old_str_prefix = "c#{old_str}"
  new_str_prefix = "c#{new_str}"
  begin
    # Get all files/directories, and sort then by their depth to handle deep items first
    items = Dir.glob("#{directory}/**/*", File::FNM_DOTMATCH).sort_by { |path| -path.count('/') }
    items.each do |item|
      base_name = File.basename(item)
      # Only work on JSON files
      next unless base_name.end_with?('.json')
      content = File.read(item)
      json_data = JSON.parse(content)

      # Convert the JSON back to a string after replacing occurrences
      updated_content = JSON.pretty_generate(json_data).gsub(old_str_prefix, new_str_prefix)

      File.write(item, updated_content)
      puts "Updated JSON content in: #{item}"
    rescue JSON::ParserError => e
      puts "Warning: Could not parse JSON file #{item}: #{e.message}"
    end
  end
end

directory = "."

OptionParser.new  do |opts|
  opts.banner = "smash_mods - Replace a character slot with another"
  opts.separator "Usage: smash_mods OLD NEW"
  opts.separator ""
  opts.separator "OLD    Number between 01 and 07"
  opts.separator "NEW    Number between 01 and 07"

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end

  opts.on("-d", "--directory", "Directory to search (by default PWD)") do |dir|
    directory = dir
  end
end.parse!

if ARGV.length < 2
  puts "Usage: smash_mods OLD NEW"
  exit(1)
end

old_str = ARGV[0]
new_str = ARGV[1]

unless Dir.exist?(directory)
  puts "Error: Directory does not exist"
  exit(1)
end

rename_items(directory, old_str, new_str)
update_json_content(directory, old_str, new_str)

